{"version":3,"sources":["Components/PeptideForm.js","Mass/MassMap.js","Mass/MassData.js","Mass/Mass.js","Mass/FragmentCalculator.js","Components/FragmentTable.js","Components/App.js","index.js"],"names":["IonSeries","A_X","B_Y","C_Z","defaultInputs","sequence","charge","ionSeries","nTerm","cTerm","mods","PeptideForm","props","useState","inputs","setInputs","onSubmit","e","preventDefault","className","value","onChange","target","Object","values","map","index","key","type","min","max","modFields","i","mod","push","maxLength","nextInputs","length","makeModFields","MassMap","masses","this","merge","BigNumber","plus","elements","proton","H","C","N","O","S","Se","aminoAcids","A","D","E","F","G","I","K","L","M","P","Q","R","T","V","W","Y","Mass","mass","m","times","dividedBy","applyCharge","toPrecision","isAlpha","c","charCode","charCodeAt","FragmentCalculator","output","aminoAcid","element","elementMass","AminoAcidMasses","toUpperCase","leftIons","leftSequences","minus","NTermMass","add","get","substring","toString","rightIons","rightSequences","CTermMass","split","reverse","join","data","FragmentTable","row","style","color","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1ac67d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n/**\n * Enum for ion series selection.\n */\nexport const IonSeries = {\n    A_X: 'a-x',\n    B_Y: 'b-y',\n    C_Z: 'c-z',\n};\n\n/**\n * Inputs for first page load. Each item\n * is a field in the form.\n */\nexport const defaultInputs = {\n    sequence: 'PEPTIDE',\n    charge: 1,\n    ionSeries: IonSeries.B_Y,\n    nTerm: '',\n    cTerm: '',\n    mods: [\n        ['^', '79.9663304104'],\n        ['*', '15.9949146221'],\n        ['C', '57.021464'],\n        ['', ''],\n        ['', ''],\n        ['', ''],\n        ['', ''],\n        ['', ''],\n    ],\n};\n\n/**\n * Creates the fields for inputting peptide mods.\n * This is only part of the component created by PeptideForm\n *\n * @param {Object} inputs\n * @param {function} setInputs\n * @returns {Array}\n */\nfunction makeModFields(inputs, setInputs) {\n    const mods = inputs.mods;\n    const modFields = [];\n    for (let i = 0; i < inputs.mods.length; ++i) {\n        let mod = mods[i];\n        modFields.push(\n            <div key={i} className=\"form-row\">\n                <div className=\"form-group col-3\">\n                    <input\n                        type=\"text\"\n                        maxLength=\"1\"\n                        value={mod[0]}\n                        className=\"form-control form-control-sm\"\n                        onChange={(e) => {\n                            let nextInputs = { ...inputs };\n                            nextInputs.mods[i][0] = e.target.value;\n                            setInputs(nextInputs);\n                        }}\n                    />\n                </div>\n                <div className=\"form-group col-9\">\n                    <input\n                        type=\"text\"\n                        value={mod[1]}\n                        className=\"form-control form-control-sm\"\n                        onChange={(e) => {\n                            let nextInputs = { ...inputs };\n                            nextInputs.mods[i][1] = e.target.value;\n                            setInputs(nextInputs);\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n    return modFields;\n}\n\n/**\n * Component that displays the form.\n *\n * @param {Object} props\n */\nexport default function PeptideForm(props) {\n    let [inputs, setInputs] = useState(defaultInputs);\n\n    let handleSubmit = (e) => {\n        e.preventDefault();\n        props.onSubmit(inputs);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label>Peptide:</label>\n                <input\n                    className=\"form-control\"\n                    value={inputs.sequence}\n                    onChange={(e) =>\n                        setInputs({ ...inputs, sequence: e.target.value })\n                    }\n                />\n            </div>\n            <div className=\"form-group\">\n                <button className=\"btn btn-primary\">Calculate</button>\n            </div>\n            <div className=\"form-group\">\n                <label>Ion Series</label>\n                <select\n                    className=\"form-control\"\n                    value={inputs.ionSeries}\n                    onChange={(e) =>\n                        setInputs({ ...inputs, ionSeries: e.target.value })\n                    }\n                >\n                    {Object.values(IonSeries).map((value, index) => (\n                        <option key={index}>{value}</option>\n                    ))}\n                </select>\n            </div>\n            <div className=\"form-group\">\n                <label>Charge</label>\n                <input\n                    className=\"form-control\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"10\"\n                    value={inputs.charge}\n                    onChange={(e) =>\n                        setInputs({ ...inputs, charge: e.target.value })\n                    }\n                />\n            </div>\n            <div className=\"form-group\">\n                <label>Modifications</label>\n\n                <div className=\"form-row\">\n                    <div className=\"col-3\">n-term</div>\n                    <div className=\"form-group col-9\">\n                        <input\n                            type=\"text\"\n                            value={inputs.nTerm}\n                            className=\"form-control form-control-sm\"\n                            onChange={(e) =>\n                                setInputs({ ...inputs, nTerm: e.target.value })\n                            }\n                        />\n                    </div>\n                </div>\n\n                <div className=\"form-row\">\n                    <div className=\"form-group col-3\">c-term</div>\n                    <div className=\"form-group col-9\">\n                        <input\n                            type=\"text\"\n                            value={inputs.cTerm}\n                            className=\"form-control form-control-sm\"\n                            onChange={(e) =>\n                                setInputs({ ...inputs, cTerm: e.target.value })\n                            }\n                        />\n                    </div>\n                </div>\n\n                {makeModFields(inputs, setInputs)}\n            </div>\n        </form>\n    );\n}\n","import { BigNumber } from 'mathjs';\n\n/**\n * Stores masses for amino acids and symbols.\n */\nexport default class MassMap {\n    /**\n     * @param {Object} masses\n     */\n    constructor(masses) {\n        this.masses = masses;\n    }\n\n    /**\n     * Merge another map of masses to this one.\n     * Masses are summed if the key is present in both,\n     * otherwise a new key can be added.\n     *\n     * @param {Object} merge\n     */\n    merge(merge) {\n        for (let i in merge) {\n            let mod = merge[i];\n            if (!mod[0] || !mod[1]) {\n                continue;\n            }\n            let key = mod[0];\n            let value = new BigNumber(mod[1]);\n            if (key in this.masses) {\n                this.masses[key] = this.masses[key].plus(value);\n            } else {\n                this.masses[key] = value;\n            }\n        }\n        return this.masses;\n    }\n\n    /**\n     * Returns the mass associated with the key,\n     * or returns zero if key not found.\n     *\n     * @param {string} key\n     * @returns {BigNumber}\n     */\n    get(key) {\n        if (!(key in this.masses)) {\n            return new BigNumber(0);\n        }\n        return this.masses[key];\n    }\n}\n","import { BigNumber } from 'mathjs';\n\n/**\n * Monoisotopic element masses from NIST\n * https://www.nist.gov/pml/atomic-weights-and-isotopic-compositions-relative-atomic-masses\n */\nexport const elements = {\n    proton: '1.007276466621',\n    H: '1.00782503223',\n    C: '12',\n    N: '14.00307400443',\n    O: '15.99491461957',\n    S: '31.9720711744',\n    Se: '79.9165218',\n};\n\n/**\n * Composition of each amino acid.\n */\nconst aminoAcids = {\n    A: { C: 3, H: 5, N: 1, O: 1, S: 0 },\n    C: { C: 3, H: 5, N: 1, O: 1, S: 1 },\n    D: { C: 4, H: 5, N: 1, O: 3, S: 0 },\n    E: { C: 5, H: 7, N: 1, O: 3, S: 0 },\n    F: { C: 9, H: 9, N: 1, O: 1, S: 0 },\n    G: { C: 2, H: 3, N: 1, O: 1, S: 0 },\n    H: { C: 6, H: 7, N: 3, O: 1, S: 0 },\n    I: { C: 6, H: 11, N: 1, O: 1, S: 0 },\n    K: { C: 6, H: 12, N: 2, O: 1, S: 0 },\n    L: { C: 6, H: 11, N: 1, O: 1, S: 0 },\n    M: { C: 5, H: 9, N: 1, O: 1, S: 1 },\n    N: { C: 4, H: 6, N: 2, O: 2, S: 0 },\n    O: { C: 5, H: 10, N: 2, O: 1, S: 0 },\n    P: { C: 5, H: 7, N: 1, O: 1, S: 0 },\n    Q: { C: 5, H: 8, N: 2, O: 2, S: 0 },\n    R: { C: 6, H: 12, N: 4, O: 1, S: 0 },\n    S: { C: 3, H: 5, N: 1, O: 2, S: 0 },\n    T: { C: 4, H: 7, N: 1, O: 2, S: 0 },\n    V: { C: 5, H: 9, N: 1, O: 1, S: 0 },\n    W: { C: 11, H: 10, N: 2, O: 1, S: 0 },\n    Y: { C: 9, H: 9, N: 1, O: 2, S: 0 },\n};\n\n/**\n * Calculates the mass of each amino acid based on its\n * chemical composition and using monoisotopic element masses.\n *\n * Returns an object where the keys are the amino acid\n * and the values are instances of BigNumber with mass.\n */\nexport function AminoAcidMasses() {\n    let output = {};\n    for (let aminoAcid in aminoAcids) {\n        let mass = new BigNumber(0);\n        for (let element in aminoAcids[aminoAcid]) {\n            const elementMass = new BigNumber(elements[element]);\n            mass = mass.plus(elementMass.times(aminoAcids[aminoAcid][element]));\n        }\n        output[aminoAcid] = mass;\n    }\n    return output;\n}\n\n/**\n * Calculates the mass of the n-terminus segment of the peptide,\n * not including any modifications.\n *\n * @param {string} ionSeries\n * @returns {Mass}\n */\nexport function NTermMass(ionSeries) {\n    if (ionSeries === 'a') {\n        return new BigNumber(elements['proton'])\n            .minus(new BigNumber(elements['C']))\n            .minus(new BigNumber(elements['O']));\n    }\n    if (ionSeries === 'b') {\n        return new BigNumber(elements['proton']);\n    }\n    if (ionSeries === 'c') {\n        return new BigNumber(elements['N'])\n            .plus(new BigNumber(elements['H']).times(3))\n            .plus(new BigNumber(elements['proton']));\n    }\n    return new BigNumber(0);\n}\n\n/**\n * Calculates the mass of the c-terminus segment of the peptide,\n * not including any modifications.\n *\n * @param {string} ionSeries\n * @returns {Mass}\n */\nexport function CTermMass(ionSeries) {\n    if (ionSeries === 'x') {\n        return new BigNumber(elements['proton'])\n            .minus(new BigNumber(elements['C']))\n            .minus(new BigNumber(elements['O']).times(2));\n    }\n    if (ionSeries === 'y') {\n        return new BigNumber(elements['O'])\n            .plus(new BigNumber(elements['H']).times(2))\n            .plus(new BigNumber(elements['proton']));\n    }\n    if (ionSeries === 'z') {\n        return new BigNumber(elements['O']).minus(new BigNumber(elements['N']));\n    }\n    return new BigNumber(0);\n}\n","import { BigNumber } from 'mathjs';\nimport { elements } from './MassData';\n\nexport default class Mass {\n    constructor(mass = 0, charge = 1) {\n        this.mass = new BigNumber(mass);\n        this.charge = charge;\n    }\n\n    /**\n     * Increment mass\n     *\n     * @param {Mass} m\n     * @returns {BigNumber}\n     */\n    add(m) {\n        this.mass = this.mass.plus(m);\n    }\n\n    /**\n     * Calculates the m/z for the given charge.\n     *\n     * @param {Mass} mass\n     * @param {int} charge\n     * @returns {BigNumber}\n     */\n    applyCharge(mass, charge) {\n        const proton = new BigNumber(elements['proton']);\n        return mass.plus(proton.times(charge - 1)).dividedBy(charge);\n    }\n\n    /**\n     * Get result as string.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return this.applyCharge(this.mass, this.charge).toPrecision(12);\n    }\n}\n","import { BigNumber } from 'mathjs';\nimport MassMap from './MassMap';\nimport Mass from './Mass';\nimport { AminoAcidMasses, NTermMass, CTermMass } from './MassData';\n\n/**\n * Returns true if the input is A-Z\n *\n * @param {string} c\n * @returns {bool}\n */\nfunction isAlpha(c) {\n    let charCode = c.charCodeAt(0);\n    return charCode > 64 && charCode < 91;\n}\n\n/**\n * Creates the data for the FragmentTable.\n *\n * @param {string} sequence The peptide sequence\n * @param {int} charge\n * @param {IonSeries} ionSeries\n * @param {float} nTerm Mod mass to add to n-terminus\n * @param {float} cTerm Mod mass to add to c-terminus\n * @param {Array} mods Array of pairs of AA/symbol and mass\n */\nexport default function FragmentCalculator(\n    sequence,\n    charge,\n    ionSeries,\n    nTerm,\n    cTerm,\n    mods\n) {\n    let masses = new MassMap(AminoAcidMasses());\n    masses.merge(mods);\n\n    sequence = sequence.toUpperCase();\n\n    // Calculate n-term fragment ions, e.g. b-ions\n    const leftIons = [];\n    const leftSequences = [];\n    let mass = new Mass(NTermMass(ionSeries[0]), charge);\n    if (nTerm) {\n        // Adds n-term mod mass\n        mass.add(new BigNumber(nTerm));\n    }\n    let i = 0;\n    while (i < sequence.length - 1) {\n        mass.add(masses.get(sequence[i]));\n        ++i;\n        while (i < sequence.length - 1 && !isAlpha(sequence[i])) {\n            // Add symbol masses.\n            mass.add(masses.get(sequence[i]));\n            ++i;\n        }\n        leftSequences.push(sequence.substring(0, i));\n        leftIons.push(mass.toString());\n    }\n\n    // Calculate c-term fragment ions, e.g. y-ions\n    const rightIons = [];\n    const rightSequences = [];\n    mass = new Mass(CTermMass(ionSeries[ionSeries.length - 1]), charge);\n    if (cTerm) {\n        // Add c-term mod mass\n        mass.add(new BigNumber(cTerm));\n    }\n    i = sequence.length - 1;\n    while (i > 0) {\n        while (i > 0 && !isAlpha(sequence[i])) {\n            // Add symbol masses.\n            mass.add(masses.get(sequence[i]));\n            --i;\n        }\n        mass.add(masses.get(sequence[i]));\n        --i;\n        rightSequences.push(\n            sequence\n                .substring(i + 1)\n                .split()\n                .reverse()\n                .join()\n        );\n        rightIons.push(mass.toString());\n    }\n\n    // Assemble the data into a table-friendly array.\n    let data = [];\n    for (let i = 0; i < leftIons.length; ++i) {\n        data.push([\n            leftSequences[i],\n            ionSeries[0] + (i + 1).toString(),\n            leftIons[i],\n            rightIons[rightIons.length - (i + 1)],\n            ionSeries[ionSeries.length - 1] +\n                (rightIons.length - (i + 1)).toString(),\n            rightSequences[rightSequences.length - (i + 1)],\n        ]);\n    }\n\n    return data;\n}\n","import React from 'react';\nimport FragmentCalculator from '../Mass/FragmentCalculator';\n\n/**\n * Component that displays the table.\n *\n * @param {Object} props\n */\nexport default function FragmentTable(props) {\n    let data = FragmentCalculator(\n        props.sequence,\n        props.charge,\n        props.ionSeries,\n        props.nTerm,\n        props.cTerm,\n        props.mods\n    );\n\n    return (\n        <div>\n            <h3>\n                {props.charge}+ Fragment Ions ({props.ionSeries})\n            </h3>\n            <div className=\"table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Fragment</th>\n                            <th>Ion</th>\n                            <th>m/z</th>\n                            <th>m/z</th>\n                            <th>Ion</th>\n                            <th className=\"text-right\">Fragment</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map((row, i) => (\n                            <tr key={i}>\n                                <td className=\"text-left\">{row[0]}</td>\n                                <td style={{ color: 'blue' }}>{row[1]}</td>\n                                <td>{row[2]}</td>\n                                <td>{row[3]}</td>\n                                <td style={{ color: 'orangered' }}>{row[4]}</td>\n                                <td className=\"text-right\">{row[5]}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport PeptideForm, { defaultInputs } from './PeptideForm';\nimport FragmentTable from './FragmentTable';\n\n/**\n * Main component for the App\n */\nexport default function App() {\n    let [inputs, setInputs] = useState(defaultInputs);\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <PeptideForm\n                            onSubmit={(data) => {\n                                setInputs(data);\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-8\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <FragmentTable {...inputs} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}